[{"categories":null,"content":"博客维护方法 新推文 每篇文章开头，使用yaml格式定义文章的基本信息，格式如下：\n--- layout: post title: \u0026#34;博客维护方法\u0026#34; subtitle: \u0026#34;\u0026#34; description: \u0026#34;记录了上传新文章和更新搜索索引的方法\u0026#34; date: 2025-09-24 author: \u0026#34;黄瑞杰\u0026#34; image: \u0026#34;/img/postImg/1.jpg\u0026#34; URL: \u0026#34;/allpost/first_commit\u0026#34; tags: [\u0026#34;数据结构\u0026#34;, \u0026#34;二叉树\u0026#34;, \u0026#34;算法\u0026#34;] --- 其中，URL需要更改为不同的文件夹，比如second_commit等。因为每个文件夹中只会有一个index.html。\n嵌入视频: 添加图片：需要将图片放入content的同级目录static中的img，并修改图片相对路径。\n/img/postImg/2.png 测试：\n测试效果 使用hugo server命令，在本地查看上传后的效果。\n使用hugo命令，在本地构建public文件夹。\n将public文件夹通过git上传到github。\n更新搜索索引 使用hugo构建public文件夹。 使用npm run algolia更新algolia平台数据。 ","date":1758672000,"objectID":"145fa80a5673e10c00fd4a9abee5d530","permalink":"https://huang-0421.github.io/AA/first_commit/","tags":null,"title":"博客维护方法"},{"categories":null,"content":"前言 二叉树的遍历方法分为深度优先遍历与宽度优先遍历，其中深度优先遍历又以根节点的访问时机分为前序遍历、中序遍历与后序遍历，而宽度优先遍历（层序遍历）则是一层一层往下遍历。\n正文 前序遍历 前序遍历有递归和迭代两种实现方式\n递归实现：\nstruct TreeNode { int val; TreeNode* left; TreeNode* right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} //构造函数初始化 }; void preorderTraversal(TreeNode* root, vector\u0026lt;int\u0026gt;\u0026amp; result) { if (root == NULL) { return; } result.push_back(root-\u0026gt;val); // 将当前节点的值加入结果列表 preorderTraversal(root-\u0026gt;left, result); // 递归访问左子树 preorderTraversal(root-\u0026gt;right, result); // 递归访问右子树 } vector\u0026lt;int\u0026gt; preorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; result; preorderTraversal(root, result); // 调用重载函数 return result; } 迭代实现：\nvoid preorderTraversal(TreeNode* root) { if (root == nullptr) { return; } std::stack\u0026lt;TreeNode*\u0026gt; stack; stack.push(root); while (!stack.empty()) { TreeNode* current = stack.top(); stack.pop(); std::cout \u0026lt;\u0026lt; current-\u0026gt;value \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 访问节点 if (current-\u0026gt;right != nullptr) { stack.push(current-\u0026gt;right); }//右孩子先进后出 if (current-\u0026gt;left != nullptr) { stack.push(current-\u0026gt;left); }//左孩子后进先出 } } 中序遍历 中序遍历的递归实现与前序遍历的区别仅仅是：中序遍历在递归访问左子树和递归访问右子树之间将节点加入结果列表。\nvoid preorderTraversal(TreeNode* root, vector\u0026lt;int\u0026gt;\u0026amp; result) { if (root == NULL) { return; } preorderTraversal(root-\u0026gt;left, result); // 递归访问左子树 result.push_back(root-\u0026gt;val); // 将当前节点的值加入结果列表 preorderTraversal(root-\u0026gt;right, result); // 递归访问右子树 } vector\u0026lt;int\u0026gt; preorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; result; preorderTraversal(root, result); // 调用重载函数 return result; } 同理，后序遍历则是在递归访问左子树和右子树之后将节点加入结果列表，代码不在赘述。\n中序遍历的迭代实现也是通过栈来实现：\n​ 我们使用了一个栈来保存经过的节点。我们从根节点开始，将当前节点以及其左子树中的节点都入栈，直到遇到叶子节点。然后，弹出栈顶节点，将其值加入结果列表，并将当前节点指向其右子树。然后，重复上述步骤，直到栈为空且当前节点为空。最终，返回得到的结果列表，即为中序遍历的结果。代码如下：\nvector\u0026lt;int\u0026gt; inorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; res; stack\u0026lt;TreeNode*\u0026gt; stk; TreeNode* curr = root; while (curr != nullptr || !stk.empty()) { while (curr != nullptr) { stk.push(curr); curr = curr-\u0026gt;left; } curr = stk.top(); stk.pop(); res.push_back(curr-\u0026gt;val); curr = curr-\u0026gt;right; } return res; } 后序遍历 后序遍历的迭代实现：\n我们从根节点开始，将每个节点以及其左子树中的节点都入栈，直到遇到叶子节点。然后，检查栈顶节点的右子树是否为空，或者是否已经访问过。如果是，则将栈顶节点的值加入结果列表，并将其弹出栈。然后，将prev指针指向当前弹出的节点，继续处理下一个节点。如果栈顶节点的右子树不为空且未被访问过，则将当前节点指向其右子树，继续迭代处理右子树。最终，返回得到的结果列表，即为后序遍历的结果。\nvector\u0026lt;int\u0026gt; postorderTraversal(TreeNode* root) { vector\u0026lt;int\u0026gt; res; stack\u0026lt;TreeNode*\u0026gt; stk; TreeNode* prev = nullptr; while (root != nullptr || !stk.empty()) { while (root != nullptr) { stk.push(root); root = root-\u0026gt;left; } root = stk.top(); if (root-\u0026gt;right == nullptr || root-\u0026gt;right == prev) { res.push_back(root-\u0026gt;val); stk.pop(); prev = root; root = nullptr; } else { root = root-\u0026gt;right; } } return res; } 宽度优先遍历（层次遍历） 宽度优先遍历通过队列来实现，代码如下：\nvector\u0026lt;int\u0026gt; bfs(TreeNode* root) { vector\u0026lt;int\u0026gt; res; if (root == nullptr) return res; queue\u0026lt;TreeNode*\u0026gt; q; q.push(root); while (!q.empty()) { TreeNode* curr = q.front(); q.pop(); res.push_back(curr-\u0026gt;val); if (curr-\u0026gt;left != nullptr) { q.push(curr-\u0026gt;left); } if (curr-\u0026gt;right != nullptr) { q.push(curr-\u0026gt;right); } } return res; } ","date":1693526400,"objectID":"bdcc86bd5554e482f13aeb3398b858d8","permalink":"https://huang-0421.github.io/AA/post1/","tags":["数据结构与算法"],"title":"二叉树的遍历方法"},{"categories":null,"content":"前言 KMP算法是我在学习《数据结构与算法》时遇到的一种解决字符串匹配问题的高效算法。面对这个问题，我最开始想到的是暴力算法，也就是一位一位的往下比对。\nBF算法 /*Brute-Force（BF算法）穷举思路*/ int index_BF(SString S,SString T) { int i = 1; int j = 1; while(i\u0026lt;=S.length\u0026amp;\u0026amp;j\u0026lt;=T.length) { if(S.ch[i]==T.ch[j]) { i++; j++; } else { i=i-j+2; j=1; } } if(j\u0026gt;T.length) return i-T.length; else return 0; } 然而在这过程中指针下标的回溯次数会非常多，所以匹配速度很慢，最坏的情况下空间复杂度为O(m*n)。\nKMP算法 KMP算法 我们从这个例子来看，此时e和c出现不匹配，按照BF算法我们应该将子串后移一位重新进行比较，但其实是没有必要的，因为中间并没有相同的部分。我们观察到子串红色代表已匹配部分（下面称它为子子串），其中开头和结尾都有相同的ab，所以我们想能不能将子子串开头ab直接移动到其结尾ab处呢，这样就可以跳过中间不匹配的情况，同时保证主串的指针（下标）无需回溯，可以保持在e的位置继续往后比对。\n所以KMP算法的核心思路就是，当子串与主串出现不匹配时，我们就移动子串（注意真正移动的是下标，这里说子串移动是为了方便理解），直接跳过中间不可能相同的部分，然后继续往下比对。现在的问题是，我们如何知道子串需要移动多少个位置呢？\n开头和结尾相同的部分（也就是上图中的ab）我们称作子串的前后缀。\n此时我们需要找到这个子子串的最大前后缀，然后就将前缀移动到后缀处。这时我们可能会有疑惑，为什么前缀可以直接移动到其后缀处，会不会出现移动到中间某个位置就匹配的情况？这是不可能的，因为如果出现了中间就匹配的情况，说明当前的前后缀不是最大前后缀。\n由上述原理，假设子串与主串在下标为i处出现了不匹配，那么我们就去查找前面长度为i-1的子子串的最大前后缀（设长度为x），然后从子串的x**+1**位置与主串的当前位置起，开始往后继续比较。翻译为代码如下：\nint KMPIndex(SString S,SString T) { int next[MAXSIZE],i=0,j=0; GetNext(T,next); while(i\u0026lt;S.length \u0026amp;\u0026amp; j\u0026lt;T.length) { if(j==0 || S.ch[i]==T.ch[j]) { i++; j++; } else j=next[j]; //子串的下标直接跳转到next[j]处 } if(j\u0026gt;T.length) return (i-T.length); else return -1; } 其中，我们将以子串每一位为结尾的子子串的最大前后缀长度储存在一个名为next的数组当中。next数组，顾名思义它指示了下一步比对时下标所在的位置，而且next数组只由子串决定。\n如何求得next数组呢，我们假设next[j] = t，表示由前j-1个字母组成的子子串的最大前后缀的长度为t-1。此时对于第j+1个字母来说，有两种情况：\n第j个字母与第t个字母相同，那么最大前后缀的长度+1，next[j+1] = t+1 第j个字母与第t个字母不同，所以前后缀就无法再变长，但是可能组成新的最大前后缀。如下图所示 ： 此时两个红色部分已经匹配了，说明2=4，如果红色部分之中还有更小的前后缀如1和2，那么1=2，所以1=4，如果1后的字母与蓝色部分相同，则可以形成新的最大前后缀。具体操作为反复令t = **n**ext[t]，直到t=0也就是第一个字母，或者找到下一个字母可以和蓝色部分匹配。 翻译为代码如下：\nvoid GetNext(SString T,int next[]) { next[1]=0; int j=1,t=0; while(j \u0026lt; T.length) { if(t==0 || T.ch[j]==T.ch[t]) { next[j+1]=t+1; j++;t++; } else t=next[t]; } } 总的来说KMP算法 原理不难理解，但是需要注意下标移动的位置，以及边界问题。上文中的图片来源于博主@哈顿之光《数据结构KMP算法配图详解》。\n","date":1692835200,"objectID":"94ea21a04d022ffd5a830d7b0567d780","permalink":"https://huang-0421.github.io/AA/post2/","tags":null,"title":"KMP算法理解"}]